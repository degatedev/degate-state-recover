package staterecovery

import (
	"encoding/json"
	"flag"
	"fmt"
	"log"
	"staterecovery/common/entity"
	"staterecovery/common/util"
	"staterecovery/conf"
	"staterecovery/data"
	"staterecovery/statemanager"
	"strconv"
	"testing"

	"github.com/ethereum/go-ethereum/common"
	"github.com/shopspring/decimal"
)

func Test10To16(t *testing.T) {
	big, _ := decimal.NewFromString("410336213479141349366037534418233874246244310787")
	hex := fmt.Sprintf("0x%x", big.BigInt())
	log.Println("hex:", hex)
}

func Test16To10(t *testing.T) {
	dataHex := common.FromHex("0x1c4bb3f21cd3a4929b6d1d39b90bc162828ddec30a9ef4edd58da46d6d349830")
	log.Println("dataHex:", util.BytesToIntStr(dataHex))
}

func TestJson(t *testing.T) {
	testJson := `{"2371789476252246873145569183657984076150578936906379480269269056232125907764":[[18298609842015643040044099129089617646726077709878673957695062439183530196057,18298609842015643040044099129089617646726077709878673957695062439183530196057,18298609842015643040044099129089617646726077709878673957695062439183530196057,18298609842015643040044099129089617646726077709878673957695062439183530196057],1073741821]}`
	testData := make(map[string][]decimal.Decimal)

	err := json.Unmarshal([]byte(testJson), &testData)
	if err != nil {
		log.Println("in test err:", err.Error())
		return
	}
}

func TestParseData(t *testing.T) {
	dataStr := `377bb7700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008445322843000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e0039cc66ba04a6ff6d2e0f2dc824757c1e58bac389461435df88876d796680fcb0cf89cab94c167bed049e6eef1f6b6d0d36e3a6d1ad488a5459e0fe78eb230f501826fd86f6efe7a6bf6defe7251a291a29a0801dd1127ef960a02fbdab1939b1abba98eeacab2c5f0237cb78f97d4fbdfa3f4d3d7725061d10860a745eef73a1d4cbbe5f212193964f6f492667571f38c85b9154bbf8d1a6432356d7e57ae3425253aa95146377260a39fdfac3abf3f10ebc23c791bd904a82d8a387ea9c5fc01a01ccd5194d3a4af6691a8b25493c91ea10f478a34b44ac046a244a46973ca1eb3731cb9abc7e7ccbcb96081fc68068e39fe8d35acc1da5d57fcc5c20114100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000007a000000000000000000000000000000000000000000000000000000000000001f38aa347da63fef707c7142e0bf12ac93f70b827f5123e5af2f9ce2da5d9c3ae4eaa6b18b6a2112b2f8bd5191abde4f951e1bb52b20ded741c090d44a05485cb20ffd23fcb9319fd8ea0d919606f8f5fde94f6445304471448f57283867af653e6eb7844060a3f2d99aff4541ef8fce748631d230b0e3f177f70ca7bfdab951afd720ce9ca6875a4723dad162d5fe4faaeda62710e63183209120000000300000002000100020000006c6697c44b71a769482a701b3539c97952e424ef0000000900000000000000000000000000000000000000000000000000000002c68af0bb1400000000000000000000000000000000000000000000016c6697c44b71a769482a701b3539c97952e424ef00000000000000000000a0d527000294a2b03c504b7a13f5bb351f78d7564994023787d907b2b8239aa3000000000000000900000000000000000001ca53d59f32c7d89d3cebe7c164b294f50e207b220000000000000000000091ec4d1f779a143547b5de724225e4c884afce6d8f714771ee9ade9ac41b50cbcffffffff0000000000000000000000000000000000000000000000000000000000000042beb319424430d4758495592755104925637cc88e96c3c545f356088fa19f943d34e6644991c2311994422c7536fa7d0234c64b5494d5d4a46d7e68f8ad0855f41c020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffff0000000000000000000000000000000000000000000000000000000000000042c1b734262ff0b3488171e9c73f2c93cf302bbd4407f8b00bad76060f9321d629378416c1808e91f9c87112fa27be3b32e69fe49cfc6c137097f599d61f6af28e1c020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000`

	dataObj := &data.BlockData{
		Data: common.FromHex(dataStr),
	}
	submittedBlock, err := parseSubmittedBlock(dataObj)
	if err != nil {
		log.Println("err:", err.Error())
		return
	}
	log.Println("hex:", common.Bytes2Hex(submittedBlock.Data))
}

func TestConvertMerkleProofToInput(t *testing.T) {
	data := `{"accountLeaf":{"accountID":6,"nonce":1,"owner":"0x731d1bc262cd2b7b1d9129d54386071f389f565f","pubKeyX":3902315155730336140817396156003226722729485834266727967144798649420475692401,"pubKeyY":20174676570216064271408239671355066030352189078206294284176777120727153021228},"balanceLeaf":{"tokenID":0,"balance":897712950000000000},"accountMerkleProof":[714174506817215894321833745492468088691325055016037867186631909485471104922,10714687348720061881812392204061185971359498799962903684852320189730818722651,3441984018870624876792925098202389414718460007919959585304858982743305717682,1708701634561335068102608611540350620206368530545601395038705296895317861661,5499377917032998825159221221270903287550141525466475992905669713167866203365,2189811263576040022349808910033585883613516022637834147475807059931769474300,7669687174902331710586988036004899528069017224996045154273160346624815884041,11367997022856567811568012496669030460942194062325044921507397070369744978025,12749344325499725053494385216599623629506195336670039760673575730599276771429,10397538743962073315836845988664569498692117129726154596114381365862791424047,18272724174967141572121182671267675034043086162697549331193415499118331246061,14859529381350112530778465487802109081767034129177331692353359342260393964835,1026533102660482948900852029327909642750935536631238755399814664977074434045,1026533102660482948900852029327909642750935536631238755399814664977074434045,1026533102660482948900852029327909642750935536631238755399814664977074434045,13323512689271197789701531850603295895817458193009513776124749604011913232211,13323512689271197789701531850603295895817458193009513776124749604011913232211,13323512689271197789701531850603295895817458193009513776124749604011913232211,12118642645408107593429278848228191414695161263075505828479258863580181691836,12118642645408107593429278848228191414695161263075505828479258863580181691836,12118642645408107593429278848228191414695161263075505828479258863580181691836,5203335005171162048985782130878200333224755074743196108484975037601854702492,5203335005171162048985782130878200333224755074743196108484975037601854702492,5203335005171162048985782130878200333224755074743196108484975037601854702492,3054162835117725807565327457127960975562469993566872122458942246581257586284,3054162835117725807565327457127960975562469993566872122458942246581257586284,3054162835117725807565327457127960975562469993566872122458942246581257586284,16829914903467335181495626088593998365068313259880500605410038708165044908818,16829914903467335181495626088593998365068313259880500605410038708165044908818,16829914903467335181495626088593998365068313259880500605410038708165044908818,3753653301858465039416039764332616608306132674462587525454509852359252464060,3753653301858465039416039764332616608306132674462587525454509852359252464060,3753653301858465039416039764332616608306132674462587525454509852359252464060,5110800259272497938130913661527918956590182090489349818781350014896761228737,5110800259272497938130913661527918956590182090489349818781350014896761228737,5110800259272497938130913661527918956590182090489349818781350014896761228737,14043546104713668109972746140214524068225910087314710106225379739043686438694,14043546104713668109972746140214524068225910087314710106225379739043686438694,14043546104713668109972746140214524068225910087314710106225379739043686438694,14957089653308603729607106600169756218508572609880465615915065621043162174774,14957089653308603729607106600169756218508572609880465615915065621043162174774,14957089653308603729607106600169756218508572609880465615915065621043162174774,11346867960271796555032620905716878909393349582686125719992422767386881669864,11346867960271796555032620905716878909393349582686125719992422767386881669864,11346867960271796555032620905716878909393349582686125719992422767386881669864,3189120152858579627586741254984548777907595153097813506247497517015067769656,3189120152858579627586741254984548777907595153097813506247497517015067769656,3189120152858579627586741254984548777907595153097813506247497517015067769656],"balanceMerkleProof":[18298609842015643040044099129089617646726077709878673957695062439183530196057,12816008142562838626545239649422925410508100777577166056436924251192953649620,13458975303888503520725681092028591129636005242871712847880333639575686166242,6656849246070660464802687052621635678474737069850147092403004818391343366721,12450612188716862480694148589066828821214227815119796455559926828052267346299,2371789476252246873145569183657984076150578936906379480269269056232125907764,8800186346908183461856028750254793130520064617249067863214641604786981171326,8800186346908183461856028750254793130520064617249067863214641604786981171326,8800186346908183461856028750254793130520064617249067863214641604786981171326,450569423324398381878223050304711553427091274530305503127765682565001437816,450569423324398381878223050304711553427091274530305503127765682565001437816,450569423324398381878223050304711553427091274530305503127765682565001437816,19316706057866088599694844743452177063937400906307042325376077309033687477087,19316706057866088599694844743452177063937400906307042325376077309033687477087,19316706057866088599694844743452177063937400906307042325376077309033687477087,3555867249999216554532402585819161678647739033440489641964733950427369655472,3555867249999216554532402585819161678647739033440489641964733950427369655472,3555867249999216554532402585819161678647739033440489641964733950427369655472,795979465643493012323073720522215153926162619126462630791100824127044582363,795979465643493012323073720522215153926162619126462630791100824127044582363,795979465643493012323073720522215153926162619126462630791100824127044582363,6592749167578234498153410564243369229486412054742481069049239297514590357090,6592749167578234498153410564243369229486412054742481069049239297514590357090,6592749167578234498153410564243369229486412054742481069049239297514590357090,13496785274171722928360638019535868563211704488062706656978266347098011881961,13496785274171722928360638019535868563211704488062706656978266347098011881961,13496785274171722928360638019535868563211704488062706656978266347098011881961,18141353858594260177380730431902803944325480636007600232984779833979711584621,18141353858594260177380730431902803944325480636007600232984779833979711584621,18141353858594260177380730431902803944325480636007600232984779833979711584621,20772550800217140083457856131137709414136053239493133436948426181228534942026,20772550800217140083457856131137709414136053239493133436948426181228534942026,20772550800217140083457856131137709414136053239493133436948426181228534942026,16068673802796300181665324898495388061238558011278046077031264292881458936678,16068673802796300181665324898495388061238558011278046077031264292881458936678,16068673802796300181665324898495388061238558011278046077031264292881458936678,5322606459646595993930753569217857735136759817162537787382195950121992047664,5322606459646595993930753569217857735136759817162537787382195950121992047664,5322606459646595993930753569217857735136759817162537787382195950121992047664,7571892690773059528618652901209788115755410973242595572211552684206269044675,7571892690773059528618652901209788115755410973242595572211552684206269044675,7571892690773059528618652901209788115755410973242595572211552684206269044675,5510089495238562706172892659449796873422711275069956468035719580686713779603,5510089495238562706172892659449796873422711275069956468035719580686713779603,5510089495238562706172892659449796873422711275069956468035719580686713779603,8589789729005292678407393934765522959861157726948742829224066115700840150996,8589789729005292678407393934765522959861157726948742829224066115700840150996,8589789729005292678407393934765522959861157726948742829224066115700840150996]}`
	withdrawModeMerkleProof  := &entity.WithdrawModeMerkleProof{}
	json.Unmarshal([]byte(data), withdrawModeMerkleProof)
	input := convertMerkleProofToInput(withdrawModeMerkleProof)
	log.Println("input:", input)
}

func TestParseChainBlockData(t *testing.T) {
	flag.Set("conf", "./cmd/config.toml")
	if err := conf.Init(); err != nil {
		panic(err)
	}
	if err := conf.Init(); err != nil {
		panic(err)
	}
	dr := &data.ChainDataResource{}
	err := data.InitBlockPath()
	if err != nil {
		t.Fatal(err)
	}
	blockData, err := dr.GetDataByBlockId(1767)
	if err != nil {
		t.Fatal(err)
	}
	_, err = parseSubmittedBlock(blockData)
	if err != nil {
		t.Fatal(err)
	}
}

func TestShowAccountInfo(t *testing.T) {
	state := loadState("./cmd/state.json")
	conf.InitByPath("./cmd/config.toml")
	conf.Conf.DataFrom = 1
	conf.Conf.StateBlockID = 1
	log.Println("chainNode:", conf.Conf.ChainNode)
	dataResource = data.NewDataResource(conf.Conf)
	// log.Println("test:", getTokenAddrByTokenID("1"))

	statemanager.CalculateStateTree(state)
	accounts := entity.NewAccounts()
	for accountID, accountValue := range state.AccountsValues {
		account := entity.NewAccount()
		accounts.Accounts[getOwnerAddr(accountValue.Owner)] = account
		account.AccountID = accountID

		for tokenID, balanceNode := range accountValue.BalancesLeafs {
			tokenAddr := getTokenAddrByTokenID(tokenID)
			account.Tokens[tokenAddr] = &entity.TokenInfo{
				Balance: balanceNode.Balance,
			}
		}
	}
	accountsJson, _ := json.Marshal(accounts)
	err := util.WriteTxtFile(string(accountsJson), "./cmd/accounts.json")
	if err != nil {
		log.Println("in TestShowAccountInfo WriteTxtFile error:", err.Error())
		return
	}
}

func getOwnerAddr(ownerIntStr string) (string) {
	big, _ := decimal.NewFromString(ownerIntStr)
	hex := fmt.Sprintf("0x%x", big.BigInt())
	return hex
}

var (
	tokenIDAddrMap = make(map[string] string)
)
func getTokenAddrByTokenID(tokenID string) string {
	tokenAddrStr := tokenIDAddrMap[tokenID]
	if tokenAddrStr != "" {
		return tokenAddrStr
	}
	tokenIdUint, _ := strconv.ParseUint(tokenID, 10, 32)
	tokenAddr, err := dataResource.GetTokenAddressByID(uint32(tokenIdUint))
	if err != nil {
		panic("in getTokenAddrByTokenID error:" + err.Error() + ";tokenID:" + tokenID)
	}
	tokenIDAddrMap[tokenID] = tokenAddr.String()
	return tokenAddr.String()
}
